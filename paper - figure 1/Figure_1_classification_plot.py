import sys
sys.path.append('../')

import numpy as np

import matplotlib.pyplot as plt
import matplotlib

import pickle
import umap

from main_module.KrotovV2 import *
from main_module.KrotovV2_utils import *

import matplotlib
font = {'family' : 'Times New Roman',
        'weight' : 'normal',
        'size'   : 18}
matplotlib.rc('font', **font)

data_dir = "data/"
subdir = "main/"

props = dict(boxstyle='round', facecolor='whitesmoke', alpha=0.5)

# Use the time stamps file or manually get timestamps from UMAP movies.
# Handpicked, notice this is /10 because of the UMAP timesteps
#t_s = [20, 90, 125, 153, 180, 280, 344]

def UMAP_plot(ax, n=30, temp=670, t_s=[20, 90, 125, 153, 180, 280, 344]):

    # Data loading changes per function call, multiple function calls per figs,
    

    saving_dir = data_dir+subdir+"trained_net_n"+str(n)+"_T"+str(temp)+".npz"
    
    # Loading data - will improve dir struct soon..
    data_M = np.load(saving_dir)['M']
    data_L = np.load(saving_dir)['L']
    data_T = np.load(data_dir+"miniBatchs_images.npy")[0]
    mapper = pickle.load((open(data_dir+"/umap_model_correlation.sav", 'rb')))

    embedding = mapper.transform(data_T)


    M = len(data_T)
    
    net = KrotovNet(M=M, nbMiniBatchs=1) # The rest will be filled in by the next line load-net
    net.load_net(saving_dir, epoch=0)   
      

    # Set red and green cmap
    rg_cmap = matplotlib.colors.ListedColormap(['red', 'green'])
    rg_norm = matplotlib.colors.BoundaryNorm([0, 0.5, 1], rg_cmap.N)
    
    for t_i in range(0, len(t_s)-1):

        net.visibleDetectors = data_M[t_s[t_i+1]*10]
        net.hiddenDetectors = data_L[t_s[t_i+1]*10]
        
        keys = np.zeros((M))
        for i in range(M):
            keys[i] = np.argmax(net.compute(data_T[i]))==(i//20) # 20 examples per class
            
        im = ax[t_i].scatter(embedding[:, 0], embedding[:, 1], c=keys, cmap=rg_cmap, s=25, marker=".", norm=rg_norm) # Plotting the UMAP training data

        
        # Time stamps / Cosmetics
        ax[t_i].text(0.95, 0.95, r"$t=$"+str(t_s[t_i+1]*10), transform=ax[t_i].transAxes, fontsize=16, verticalalignment='top', ha='right', bbox=props)


        # Cosmetics
        if t_i != 0 and t_i != 3:
            ax[t_i].set_yticks([])
            
        if t_i < 3:
            ax[t_i].set_xticks([])
            
    # Labels / cosmetics
    ax[0].set_ylabel("UMAP 2"); ax[3].set_ylabel("UMAP 2"); ax[3].set_xlabel("UMAP 1"); ax[4].set_xlabel("UMAP 1"); ax[5].set_xlabel("UMAP 1")

        
fig = plt.figure(figsize=(17, 17.5))
axs = fig.subplot_mosaic("""

11111111111111111111111111112222222222222222222222222222333333333333333333333333333300
11111111111111111111111111112222222222222222222222222222333333333333333333333333333300
11111111111111111111111111112222222222222222222222222222333333333333333333333333333300
11111111111111111111111111112222222222222222222222222222333333333333333333333333333300
11111111111111111111111111112222222222222222222222222222333333333333333333333333333300
11111111111111111111111111112222222222222222222222222222333333333333333333333333333300
11111111111111111111111111112222222222222222222222222222333333333333333333333333333300
11111111111111111111111111112222222222222222222222222222333333333333333333333333333300
11111111111111111111111111112222222222222222222222222222333333333333333333333333333300
11111111111111111111111111112222222222222222222222222222333333333333333333333333333300
11111111111111111111111111112222222222222222222222222222333333333333333333333333333300
11111111111111111111111111112222222222222222222222222222333333333333333333333333333300
11111111111111111111111111112222222222222222222222222222333333333333333333333333333300
11111111111111111111111111112222222222222222222222222222333333333333333333333333333300
11111111111111111111111111112222222222222222222222222222333333333333333333333333333300
11111111111111111111111111112222222222222222222222222222333333333333333333333333333300
11111111111111111111111111112222222222222222222222222222333333333333333333333333333300
11111111111111111111111111112222222222222222222222222222333333333333333333333333333300
11111111111111111111111111112222222222222222222222222222333333333333333333333333333300
11111111111111111111111111112222222222222222222222222222333333333333333333333333333300
44444444444444444444444444445555555555555555555555555555666666666666666666666666666600
44444444444444444444444444445555555555555555555555555555666666666666666666666666666600
44444444444444444444444444445555555555555555555555555555666666666666666666666666666600
44444444444444444444444444445555555555555555555555555555666666666666666666666666666600
44444444444444444444444444445555555555555555555555555555666666666666666666666666666600
44444444444444444444444444445555555555555555555555555555666666666666666666666666666600
44444444444444444444444444445555555555555555555555555555666666666666666666666666666600
44444444444444444444444444445555555555555555555555555555666666666666666666666666666600
44444444444444444444444444445555555555555555555555555555666666666666666666666666666600
44444444444444444444444444445555555555555555555555555555666666666666666666666666666600
44444444444444444444444444445555555555555555555555555555666666666666666666666666666600
44444444444444444444444444445555555555555555555555555555666666666666666666666666666600
44444444444444444444444444445555555555555555555555555555666666666666666666666666666600
44444444444444444444444444445555555555555555555555555555666666666666666666666666666600
44444444444444444444444444445555555555555555555555555555666666666666666666666666666600
44444444444444444444444444445555555555555555555555555555666666666666666666666666666600
44444444444444444444444444445555555555555555555555555555666666666666666666666666666600
44444444444444444444444444445555555555555555555555555555666666666666666666666666666600
44444444444444444444444444445555555555555555555555555555666666666666666666666666666600
44444444444444444444444444445555555555555555555555555555666666666666666666666666666600
......................................................................................
......................................................................................
......................................................................................
......................................................................................
......................................................................................
......................................................................................
......................................................................................
......................................................................................
AAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCXX
AAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCXX
AAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCXX
AAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCXX
AAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCXX
AAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCXX
AAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCXX
AAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCXX
AAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCXX
AAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCXX
AAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCXX
AAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCXX
AAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCXX
AAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCXX
AAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCXX
AAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCXX
AAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCXX
AAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCXX
AAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCXX
AAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCXX
DDDDDDDDDDDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEEEEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFXX
DDDDDDDDDDDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEEEEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFXX
DDDDDDDDDDDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEEEEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFXX
DDDDDDDDDDDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEEEEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFXX
DDDDDDDDDDDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEEEEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFXX
DDDDDDDDDDDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEEEEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFXX
DDDDDDDDDDDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEEEEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFXX
DDDDDDDDDDDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEEEEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFXX
DDDDDDDDDDDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEEEEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFXX
DDDDDDDDDDDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEEEEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFXX
DDDDDDDDDDDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEEEEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFXX
DDDDDDDDDDDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEEEEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFXX
DDDDDDDDDDDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEEEEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFXX
DDDDDDDDDDDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEEEEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFXX
DDDDDDDDDDDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEEEEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFXX
DDDDDDDDDDDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEEEEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFXX
DDDDDDDDDDDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEEEEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFXX
DDDDDDDDDDDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEEEEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFXX
DDDDDDDDDDDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEEEEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFXX
DDDDDDDDDDDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEEEEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFXX

""")

# Set red and green cmap
rg_cmap = matplotlib.colors.ListedColormap(['red', 'green'])
rg_norm = matplotlib.colors.BoundaryNorm([0, 0.5, 1], rg_cmap.N)

ax_UMAPs_top = [axs['1'], axs['2'], axs['3'], axs['4'], axs['5'], axs['6']]
ax_UMAPs_top = np.asarray(ax_UMAPs_top)          
UMAP_plot(ax_UMAPs_top)

ax_UMAPs_bot = [axs['A'], axs['B'], axs['C'], axs['D'], axs['E'], axs['F']]
ax_UMAPs_bot = np.asarray(ax_UMAPs_bot)          
UMAP_plot(ax_UMAPs_bot, n=3, t_s=[20, 27, 37, 51, 62, 90, 344])


ax_cb_UMAP_top = axs['0']
cb_UMAP_top = matplotlib.colorbar.ColorbarBase(ax_cb_UMAP_top, cmap=rg_cmap, norm=rg_norm, orientation='vertical')
cb_UMAP_top.set_ticks([0.25, 0.75]) # Finally found how to center these things 
cb_UMAP_top.set_ticklabels(["Incorrect", "Correct"], rotation=90, va='center')
cb_UMAP_top.set_label("Network classification")


ax_cb_UMAP_bot = axs['X']
cb_UMAP_bot = matplotlib.colorbar.ColorbarBase(ax_cb_UMAP_bot, cmap=rg_cmap, norm=rg_norm, orientation='vertical')
cb_UMAP_bot.set_ticks([0.25, 0.75]) # Finally found how to center these things 
cb_UMAP_bot.set_ticklabels(["Incorrect", "Correct"], rotation=90, va='center')
cb_UMAP_bot.set_label("Network classification")

ax_UMAPs_top[0].text(-0.35, 0.0, "n = 30", transform=ax_UMAPs_top[0].transAxes, fontsize=16, verticalalignment='center', ha='center', bbox=props, rotation=90)
ax_UMAPs_bot[0].text(-0.35, 0.0, "n = 3", transform=ax_UMAPs_bot[0].transAxes, fontsize=16, verticalalignment='center', ha='center', bbox=props, rotation=90)

plt.subplots_adjust(top=0.92, wspace=1.4, hspace=1.4)
plt.savefig("tmp_classification.png")
